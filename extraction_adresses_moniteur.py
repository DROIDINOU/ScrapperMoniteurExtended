from bs4 import BeautifulSoup
import re

def extract_address(texte_html):

    soup = BeautifulSoup(texte_html, 'html.parser')
    texte = soup.get_text(separator=' ')
    texte = re.sub(r'\s+', ' ', texte).strip()


    adresse_list = []

    patterns = [

        # 1Ô∏è‚É£ Tr√®s structur√© : "domicili√©(e) √† 1234 Ville, rue/avenue/... 12"
        # Utilise la ponctuation, type de voie et un num√©ro pour plus de fiabilit√©
        r"domicili[√©e](?:\(e\))?\s+√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'‚Äô\s]+,\s*[A-Z√Ä-√øa-z\-'\s]*" +
        r"(?:straat|laan|rue|avenue|chauss√©e|place|boulevard|impasse|chemin|plein|steenweg|weg|pad)\s*\d{1,4})",

        # 2Ô∏è‚É£ Idem, mais sans "(e)" optionnel et plus permissif sur les accents/espaces
        r"domicili[√©e]?\s+√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'‚Äô\s]+,\s*[A-Z√Ä-√øa-z\-'\s]+" +
        r"(?:straat|laan|rue|avenue|chauss√©e|place|boulevard|impasse|chemin|plein|steenweg|weg|pad)\s*\d{1,4})",

        # 3Ô∏è‚É£ Idem mais accepte des parenth√®ses dans ville/rue : ex. "(Que)" ou "(TOU)"
        r"domicili[√©e]?\s+√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'‚Äô\s()]+,\s*" +
        r"(?:rue|avenue|chauss√©e|place|boulevard|impasse|chemin|" +
        r"straat|laan|steenweg|plein|weg|pad)\s+[A-Z√Ä-√øa-z0-9\-'‚Äô()\s]+)",

        # 4Ô∏è‚É£ Cas o√π la ville a plusieurs mots (ex. "Rhode-Saint-Gen√®se") + rue compl√®te
        r"domicili[√©e]?\s+√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'()]+(?:\s+[A-Z√Ä-√øa-z\-'()]+)*,\s*" +
        r"(?:rue|avenue|chauss√©e|place|boulevard|impasse|chemin|" +
        r"straat|laan|steenweg|plein|weg|pad)\s+[A-Z√Ä-√øa-z0-9\-'‚Äô()\s]+)",

        # 5Ô∏è‚É£ Cas sans "domicili√© √†", avec types de voies flamands (straat, laan...)
        r"(?:domicili[√©e]?\s+)?√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'\s()]+,\s*" +
        r"(?:straat|laan|steenweg|plein|weg|pad)\s+[A-Z√Ä-√øa-z0-9\-'‚Äô()\s]+)",

        # 6Ô∏è‚É£ Idem, mais pour voies francophones (rue, avenue...)
        r"(?:domicili[√©e]?\s+)?√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-'\s()]+,\s*" +
        r"(?:rue|avenue|chauss√©e|place|boulevard|impasse|chemin)\s+[A-Z√Ä-√øa-z0-9\-'‚Äô()\s]+)",

        # 7Ô∏è‚É£ Format simple : "√† 1234 Ville, rue Nom 12" (sp√©cifique √† "rue")
        r"\b√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-']+(?:\s+[A-Z√Ä-√øa-z\-']+)*,\s+" +
        r"rue\s+[A-Z√Ä-√øa-z\-'\s]+(?:\s+\d+)?)(?=[\.,])",

        # 8Ô∏è‚É£ Idem avec "avenue", "chauss√©e", "place"
        r"\b√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-']+(?:\s+[A-Z√Ä-√øa-z\-']+)*,\s+" +
        r"(?:avenue|chauss√©e|place)\s+[A-Z√Ä-√øa-z\-'\s]+(?:\s+\d+)?)(?=[\.,])",

        # 9Ô∏è‚É£ Encore un format "domicili√© √†" avec voies francophones ‚Äî tr√®s souple
        r"domicili[√©e]?\s+√†\s+(\d{4}\s+[A-Z√Ä-√øa-z\-']+(?:\s+[A-Z√Ä-√øa-z\-']+)*,\s+" +
        r"(?:rue|avenue|chauss√©e|place)\s+[A-Z√Ä-√øa-z\-'\s]+(?:\s+\d+)?)(?=[\.,])",

        # üîü Moins fiable : capture tout apr√®s "domicili√© √†", jusqu'√† une virgule, "d√©c√©d√©", ou fin
        r"domicili[√©e](?:\(e\))?\s+√†\s+(.+?)(?=, [A-Z]{2}|, d√©c√©d√©|$)",

        # 1Ô∏è‚É£1Ô∏è‚É£ Variante souple sp√©cifique √† "est d√©c√©d√©e"
        r'domicili√©e √† (.+?),? est d√©c√©d√©e',

        # 1Ô∏è‚É£2Ô∏è‚É£ Dernier recours : capture large sur 300 caract√®res, si rien d'autre n'a match√©
        r"domicili[√©e](?:\(e\))?\s+√†\s+(.{1,300}?)(?=\.|\bd√©c√©d[√©e]|$)"
    ]

    for idx, pattern in enumerate(patterns, 1):
        matches = re.findall(pattern, texte)
        for m in matches:
            adresse_list.append(m.strip())
    # üîÑ Suppression des doublons
    adresse_list = list(set(adresse_list))
    return adresse_list
