import re
import unicodedata
from bs4 import BeautifulSoup

# --- Modules internes au projet ---
from logger_config import setup_dynamic_logger, LoggedList

# ______________________________________________________________________________________________
#                                          VARIABLES GLOBALES
# -----------------------------------------------------------------------------------------------

# logger + set pour eviter les doublons de log (doc_id +adresses)
seen_nomspersonnes = set()

# ++++++++++++++++++++++++++++++++++++++
#     VARIABLES / REGEX DE NETTOYAGE
# ++++++++++++++++++++++++++++++++++++++
# ‚ü∂ D√©tecte la formule ‚Äúil est demand√©(e) de d√©clarer l‚Äôabsence de ‚Äù
ABS_PREF = r"(?:il\s+est\s+)?demand[√©e]?\s+de\s+d√©clarer\s+l'absence\s+de"
# ‚ü∂ ‚Äúmodifi√©(e) les mesures de protection √† l‚Äô√©gard de la personne et des biens de l‚Äôint√©ress√©‚Äù
PROT_PREF = r"modifi[√©e]?\s+les\s+mesures\s+de\s+protection\s+√†\s+l[‚Äô']?√©gard\s+de\s+la\s+personne\s+et\s+" \
            r"des?\s+biens\s+de\s+l[‚Äô']?int√©ress[√©e]?"
# ‚ü∂ Variante : queue seule ‚Äú√† l‚Äô√©gard de la personne et des biens de l‚Äôint√©ress√©‚Ä¶‚Äù
INT_PREF_FULL = r"√†\s+l[‚Äô']?√©gard\s+de\s+la\s+personne\s+et\s+des?\s+biens\s+de\s+l[‚Äô']?int√©ress[√©e]?"
# ‚ü∂ Variante plus courte : ‚Äúet des biens de l‚Äôint√©ress√© ‚Äù
INT_PREF_TAIL = r"et\s+des?\s+biens\s+de\s+l[‚Äô']?int√©ress[√©e]?"
# ‚ü∂ Liste de pr√©fixes textuels √† retirer/ignorer avant un nom (ex: ‚Äún√©(e)‚Äù, ‚Äúsuccession de ‚Ä¶‚Äù, etc.)
PREFIXES = (
    r"(?:"
    r"n√©(?:e)?"
    r"|pour la succession de"
    r"|succession\s+(?:en\s+d[√©e]sh[√©e]rence|vacante)\s+de"
    r"|en qualit√© de curateur √† la succession vacante de"
    r"|la succession vacante de"
    r"|feu[e]?"   # üëà ajout√© ici
    r"|le\s+juge\s+de\s+paix\s+du\s+canton\s+de\s+[A-Z√â√à√ä√é√î√õ√Ä√Ç√á][a-z√†-√ø\-]+(?:\s+[A-Z√â√à√ä√é√î√õ√Ä√Ç√á][a-z√†-√ø\-]+)*\s+a\s+"
    r"d√©sign√©\s+(?:√†\s+)?" 
    r"|"
    + ABS_PREF +
    r"|"
    + PROT_PREF +
    r"|"
    + INT_PREF_FULL
    +
    r"|"
    + INT_PREF_TAIL +
    r")"
)

# Groupe non-capturant (?: ‚Ä¶ ) qui matche l‚Äôun des ‚Äúd√©clencheurs‚Äù suivants (s√©par√©s par |).
# Ces d√©clencheurs sont utilis√©s pour couper / segmenter le contexte (ex: fin d‚Äôun nom ou d√©but d‚Äôune
# info administrative).
CONTEXT_CUT = (
    r"(?:\bn√©(?:e)?\b|\bRN\b|\bNRN\b|\(RN|\(RRN|\bRRN\b|,?\s+inscrit[e]?\b|,?\s+domicili[√©]e?\b|,?\s+d√©c√©d√©[e]?\b)"
)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#   VARIABLES / REGEX PRENOMS ET NOMS ET RN
# Objectif : pouvoir reconna√Ætre des noms/pr√©noms √©crits en capitales, avec accents,
# apostrophes droites (') ou typographiques (‚Äô), et noms compos√©s (espaces, traits d‚Äôunion).
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Mot en MAJUSCULES (nom de famille typique) :
# - Premi√®re lettre : majuscule avec accents possibles (√â√à√Ä√Ç√ä√é√î√õ√á√Ñ√ã√è√ñ√ú≈∏)
# - Suite : au moins 1 caract√®re parmi MAJUSCULES, apostrophes (‚Äô ou '), tirets
#   ‚Üí couvre : LUYTEN, VAN, D‚ÄôALMEIDA, O‚ÄôCONNOR, VAN-DER, etc.
UPWORD = r"[A-Z√â√à√Ä√Ç√ä√é√î√õ√á√Ñ√ã√è√ñ√ú≈∏][A-Z√â√à√Ä√Ç√ä√é√î√õ√á√Ñ√ã√è√ñ√ú≈∏'‚Äô\-]{1,}"

# Bloc NOM (un ou plusieurs "UPWORD" s√©par√©s par espaces) :
# - 1 mot majuscule minimum, jusqu'√† 5 mots (0..4 suppl√©mentaires)
#   ‚Üí LUYTEN | VAN DER MEER | D‚ÄôALMEIDA | VAN DEN BROECK
NOM_BLOCK   = rf"{UPWORD}(?:\s+{UPWORD}){{0,4}}"
# Mot pr√©nom en "Casse Nom-Propre" :
# - 1√®re lettre majuscule (accents inclus), puis minuscules/accents/apostrophes/tirets
#   ‚Üí Jean, Liliane, Andr√©-Marie, D‚ÄôArtagnan (le D‚Äô est g√©r√© c√¥t√© NOM_BLOCK, mais un pr√©nom
#     compos√© avec tiret reste couvert, ex. Jean-Marc)
PRENOM_WORD = r"[A-Z√â√à√Ä√Ç√ä√é√î√õ√á][a-z√†-√∂√∏-√ø'‚Äô\-]{1,}"

# Bloc PR√âNOMS (1 √† 6 pr√©noms s√©par√©s par espaces)
#   ‚Üí Liliane Louise Victorine, Jean Pierre Michel, etc.
PRENOMS_BLK = rf"{PRENOM_WORD}(?:\s+{PRENOM_WORD}){{0,5}}"
# version bis : tol√®re m√©lange MAJ + minuscule apr√®s une majuscule initiale
PRENOMS_BLK_BIS = r"(?:[A-Z√â√à√ä√Ä√Ç][A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){0,6})"
# Token RN √©largi (RN / RRN / NRN / NN ‚Äî avec ou sans points/espaces)
RN_TOKEN = r"(?:(?:R\.?\s*){1,2}N\.?|N\.?\s*R\.?\s*N\.?|N\.?\s*N\.?)"
RN_TOKEN_ANY = RN_TOKEN # on utilisera RN_TOKEN_STRICT PAR APRES SI NECESSAIRE
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#                                    REGEX NETTOYAGE CHAMP
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Bruit l√©gal √† retirer des candidats de noms (avant tout filtrage)
STRIP_PHRASES_REGEX = [
    re.compile(r"\bde\s+l[‚Äô']?ancien\s+code\s+civil\b", re.IGNORECASE),
    # variantes utiles (optionnelles) :
    re.compile(r"\b(?:conform[√©e]ment\s+√†\s+)?(?:l[‚Äô']?)?article\s+\d+/\d+\s+de\s+l[‚Äô']?ancien\s+code\s+civil\b",
               re.IGNORECASE),
]

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#                                   LES REGEX DE RECHERCHES
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ==============================
# INTERDIT
# ==============================
# D√©tecte les personnes √† qui il est "interdit de" faire quelque chose
# G√®re les civilit√©s (Monsieur, Madame, Mr, etc.)
# Capture nom + pr√©noms, que ce soit dans l'ordre "Jean Dupont" ou "Dupont, Jean"
# S'arr√™te d√®s qu'on rencontre un mot du contexte (n√©, domicili√©, etc.)
RX_INTERDIT_A = re.compile(rf"""
    \b(?:il\s+est\s+)?interdit\s+√†\s+                 
    (?:Monsieur|Madame|M(?:r|me)?\.?\s+)?             
    (?:
        (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})      
        | (?P<nom2>{NOM_BLOCK})\s*, \s*(?P<prenoms2>{PRENOMS_BLK}) 
    )
    (?=                                               
        \s*,?\s*(?:n√©|n√©e|n√©\(e\)|domicili|pour\s+une\s+dur√©e|de\s+\d+\s+ans|;|\.|,|$)
    )
""", re.IGNORECASE | re.VERBOSE)
# ==============================
# MESURES DE PROTECTION
# ==============================
# D√©tecte les phrases signalant une modification des mesures de protection
# Cherche la personne concern√©e (int√©ress√©e), avec ses pr√©noms et nom
# Ne match que si la fin est propre (virgule, point, etc.)
RX_MODIF_PROTECTION_INTERESSE = re.compile(rf"""
    modifi[√©e]?\s+les\s+mesures\s+de\s+protection
    \s+√†\s+l[‚Äô']?√©gard\s+de\s+la\s+personne\s+et\s+des?\s+biens\s+de\s+l[‚Äô']?int√©ress[√©e]?\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?=\s*(?:,|;|\.|$))
""", re.IGNORECASE | re.VERBOSE)
# M√™me chose que le pr√©c√©dent, mais sans contrainte de ponctuation √† la fin
# Utile si tu veux d√©tecter la personne m√™me dans des phrases mal form√©es
RX_PROTECTION_INTERESSE_NOM_SEUL = re.compile(rf"""
    modifi[√©e]?\s+les\s+mesures\s+de\s+protection\s+√†\s+l[‚Äô']?√©gard\s+de\s+la\s+personne\s+et\s+des?\s+biens\s+de\s+
    l[‚Äô']?int√©ress[√©e]?\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
""", re.IGNORECASE | re.VERBOSE)
# D√©tecte les phrases qui pr√©cisent la personne prot√©g√©e, avec contexte "n√© √†"
# Tr√®s utile pour lier pr√©noms/nom + date ou lieu de naissance
RX_PROTECTION_INTERESSE_NE = re.compile(rf"""
    mesures\s+de\s+protection\s+√†\s+l[‚Äô']?√©gard\s+de\s+la\s+personne\s+et\s+des?\s+biens\s+de\s+l[‚Äô']?int√©ress[√©e]\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})   # pr√©noms puis NOM
    ,\s+(?:n√©|n√©e|n√©\(e\))\s+√†                           # suivi du "n√© √†"
""", re.IGNORECASE | re.VERBOSE)
# ==============================
# NOMS PRENOMS GENERAL
# ==============================
RX_NOM_VIRGULE = re.compile(
    rf"\b(?P<nom>{UPWORD}),\s+(?P<prenoms>{PRENOM_WORD}(?:\s+{PRENOM_WORD}){{0,3}})\b"
)


RX_PRENOM_NOM_NE_A = re.compile(rf"""
    (?P<prenoms>{PRENOM_WORD}(?:\s+{PRENOM_WORD}){{0,5}})   # 1 √† 6 pr√©noms
    \s+
    (?P<nom>[A-Z√â√à√Ä√Ç√ä√é√î√õ√á][a-z√†-√∂√∏-√ø'‚Äô\-]{{1,}}             # Nom de famille casse Nom-Propre
       (?:\s+[A-Z√â√à√Ä√Ç√ä√é√î√õ√á][a-z√†-√∂√∏-√ø'‚Äô\-]{{1,}}){{0,3}})   # Nom compos√© possible
    \s*,?\s+
    (n√©|n√©e|n√©\(e\))\s+√†                                    # Contexte obligatoire
""", re.IGNORECASE | re.VERBOSE)

# 1) Cherche : "Nom et pr√©nom(s) : NOM, Pr√©nom(s)" (souvent dans les formulaires ou d√©cisions)
RX_NOM_ET_PRENOM_LABEL = re.compile(rf"""
    \bNom\s+et\s+pr√©nom[s]?\s*:\s*          # "Nom et pr√©nom :" ou "Nom et pr√©noms :"
    (?P<nom>{NOM_BLOCK})\s*,?\s*            # NOM, virgule optionnelle
    (?P<prenoms>                            # bloc pr√©noms autorisant espaces/virgules
        {PRENOM_WORD}
        (?:\s*,?\s*{PRENOM_WORD}){{0,5}}
    )
    (?=\s*(?:$|[\n\r]|,|;|\.|Lieu|Date|Domicile|Nationalit√©|N¬∞|No|N¬∫))  # stop propre
""", re.IGNORECASE | re.VERBOSE)
# 1) ‚Äúle nomm√© : [Nr. ‚Ä¶ - ] NOM, Pr√©noms ‚Ä¶‚Äù
RX_LE_NOMME_NP = re.compile(rf"""
    \ble\s+nomm[√©e]\s*[:\-]?\s*
    (?:Nr\.?\s*[\d./-]+\s*[-‚Äì]\s*)?         # ex: "Nr. 18.2025 - " (optionnel)
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?=\s*,?\s*(?:n√©|n√©e|n√©\(e\)|RR?N|NRN|\(|$))
""", re.IGNORECASE | re.VERBOSE)
# 2) ‚ÄúNr. ‚Ä¶ - NOM, Pr√©noms ‚Ä¶‚Äù (au cas o√π ‚Äúle nomm√© :‚Äù est absent)
RX_NR_NP = re.compile(rf"""
    \bNr\.?\s*[\d./-]+\s*[-‚Äì]\s*
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?=\s*,?\s*(?:n√©|n√©e|n√©\(e\)|RR?N|NRN|\(|$))
""", re.IGNORECASE | re.VERBOSE)
RX_ABSENCE = re.compile(rf"""
    pr√©somption\s+d['‚Äô]absence
    (?:\s+√†\s+l[‚Äô']√©gard\s+de)?
    \s+
    (?:(?:Monsieur|Madame|M(?:me|r)?\.?)\s+)?
    (?P<nom>{NOM_BLOCK}),\s+(?P<prenoms>{PRENOMS_BLK})
""", re.IGNORECASE | re.VERBOSE)
# 3) g√©n√©rique ‚ÄúNOM, Pr√©noms, n√© ‚Ä¶‚Äù
RX_NP_NE = re.compile(rf"""
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    \s*,\s*(?:n√©|n√©e|n√©\(e\))\b
""", re.IGNORECASE | re.VERBOSE)
# (A) ‚ÄúMonsieur/Madame + Pr√©nom(s) + NOM (RN ‚Ä¶)‚Äù
RX_CIVILITE_PN_RN = re.compile(rf"""
    (?:Monsieur|Madame|M(?:r|me)?\.?|Ma(?:√Ætre|itre)|Me)\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})   # Pr√©noms + NOM
    \s*\(\s*{RN_TOKEN_ANY}\b[^)]*\)                    # (RN|NRN|NN ...)
""", re.IGNORECASE | re.VERBOSE)

# (B) ‚Äúappel interjet√© par Monsieur/Madame + Pr√©nom(s) + NOM (RN ‚Ä¶)‚Äù
RX_APPEL_PAR_CIVILITE = re.compile(rf"""
    (?:dit\s+l['‚Äô]?appel|l['‚Äô]?appel)?\s*
    (?:interjet[√©e]\s+par|de)\s+
    (?:Monsieur|Madame|M(?:r|me)?\.?)\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?:\s*\(\s*{RN_TOKEN_ANY}\b[^)]*\))?
""", re.IGNORECASE | re.VERBOSE)

# (C) ‚Äúrelativement √† la personne de Monsieur/Madame + Pr√©nom(s) + NOM (RN ‚Ä¶)‚Äù
RX_REL_PERSONNE_DE = re.compile(rf"""
    relativement\s+√†\s+la\s+personne\s+de\s+
    (?:Monsieur|Madame|M(?:r|me)?\.?)\s+
    (?P<prenoms>{PRENOMS_BLK})\s+
    (?P<nom>{NOM_BLOCK})
    (?:\s*\(\s*{RN_TOKEN_ANY}\b[^)]*\))? 
""", re.IGNORECASE | re.VERBOSE)
# ==============================
#      NOMS PRENOMS GENERAL
# ==============================

# ==============================
#      CAPABLE
# ==============================
RX_CAPABLE_BIENS = re.compile(rf"""
    (?:Dit\s+pour\s+droit\s+que\s+)?(?:le\s+tribunal\s+)?   # optionnels
    (?:Monsieur|Madame)\s+
    (?:
        (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})   # Pr√©nom(s) + NOM
      | (?P<nom_only>{NOM_BLOCK})                           # ou NOM seul
    )
    \s*,?\s*(?:est|soit)\s+capable\b
""", re.IGNORECASE | re.VERBOSE)

# =======================
#         SUCCESSIONS
# =======================
RX_SV_PN_NN = re.compile(rf"""
    succession
    \s+(?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)
    \s+de\s+
    (?:(?:feu[e]?\s+)?(?:Monsieur|Madame|M(?:me|r)?\.?)\s+)?   # civilit√© optionnelle
    (?P<prenoms>{PRENOMS_BLK})
    \s+(?P<nom>{NOM_BLOCK})
    \s*\(NN\s+\d{{2}}\.\d{{2}}\.\d{{2}}-\d{{3}}\.\d{{2}}\)
""", re.IGNORECASE | re.VERBOSE)

# ‚Äî Personne vis√©e par "succession vacante / en d√©sh√©rence de ..."
RX_SV_PN = re.compile(rf"""
    succession\s+(?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)\s+de\s+
    (?:feu[e]?\s+)?(?:M(?:me|adame|onsieur)?\.?\s+)?   # civilit√©/feu optionnels
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?=\s*(?:\(|,|;|\.|$))                         # stop avant (RN...), virgule, point, etc.
""", re.IGNORECASE | re.VERBOSE | re.DOTALL)
RX_QUALITE_CURATEUR_SV_PN_NN = re.compile(rf"""
    (?:√†\s+)?succession                     # accepte "succession" ou "√† succession"
    \s+(?:r√©put[√©e]e?\s+)?vacante
    (?:\s+de\s*:?\s*)?                      # "de" ou "de :" optionnels
    (?:(?:feu[e]?\s+)?(?:Monsieur|Madame|M(?:me|r)?\.?)\s+)?   # civilit√© optionnelle
    (?P<prenoms>{PRENOM_WORD}(?:\s+{PRENOM_WORD})*)           
    \s+
    (?P<nom>{UPWORD}(?:\s+{UPWORD})*)                         
    \s*\(NN\s+\d{{2}}\.\d{{2}}\.\d{{2}}-\d{{3}}\.\d{{2}}\)    
""", re.IGNORECASE | re.VERBOSE)

RX_QUALITE_CURATEUR_SV_PN = re.compile(rf"""
    (?:d√©sign[√©e]e?.{{0,300}}?)?                 # 'd√©sign√©(e)' ‚Ä¶ (tampon optionnel)
    \b(?:en\s+)?qualit√©\s+de\s+(?:curateur|curatrice)\s+
    (?:a|√†)\s+(?:la\s+)?succession\s+            # '√†' ou 'a' (robuste), 'la' optionnelle
    (?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)
    (?:\s+de\s*:?\s*)?
    (?:feu[e]?\s+)?(?:(?:Monsieur|Madame|M(?:me|r)?\.?)\s+)?   
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?=\s*(?:,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+n√©\(e\)|\s+domicili[√©e]|\\s+d√©c√©d[√©e]))  # fin propre
""", re.IGNORECASE | re.VERBOSE | re.DOTALL)


RX_CURATEUR_SV_NP_NN = re.compile(rf"""
    curateur
    \s+√†\s+(?:la\s+)?succession
    \s+(?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)
    (?:\s+de\s*:?\s*)?
    (?:feu[e]?\s+)?(?:M(?:onsieur|me|adame)?\.?\s+)? 
    (?P<nom>{NOM_BLOCK})                               # NOM en premier
    \s*,\s*
    (?P<prenoms>
        (?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+\s*){1,6}      # 1 √† 6 pr√©noms
    )
    \s*\(NN\s+\d{{2}}\.\d{{2}}\.\d{{2}}-\d{{3}}\.\d{{2}}\)   # üëà Bloc (NN ‚Ä¶) obligatoire
    (?=\s*(?:\(|,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+domicili√©|\s+d√©c√©d√©))
""", re.IGNORECASE | re.VERBOSE)

RX_CURATEUR_SV_NP = re.compile(rf"""
    curateur
    \s+√†\s+(?:la\s+)?succession
    \s+(?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)
    (?:\s+de\s*:?\s*)?
    (?:feu[e]?\s+)?(?:M(?:onsieur|me|adame)?\.?\s+)? 
    (?P<nom>{NOM_BLOCK})                               # NOM en premier
    \s*,\s*
    (?P<prenoms>
        (?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+\s*){1,6}      # 1 √† 6 pr√©noms
    )
    (?=\s*(?:\(|,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+domicili√©|\s+d√©c√©d√©))
""", re.IGNORECASE | re.VERBOSE)

RX_CURATEUR_SV_PN = re.compile(rf"""
        curateur            # le terme curateur
        \s+√†\s+(?:la\s+)?succession
        \s+(?:
            (?:r[√©e]put[√©e]e?\s+)?vacante
          | en\s+d[√©e]sh[√©e]rence
        )
        (?:\s+de\s*:?\s*)?
        (?:feu[e]?\s+)?(?:M(?:onsieur|me|adame)?\.?\s+)?   # civilit√©/feu optionnels
        (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
        (?=\s*(?:\(|,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+n√©\(e\)|\s+domicili√©|\s+d√©c√©d√©|\s+[A-Z√â√à√ä√Ä√Ç]))
    """, re.IGNORECASE | re.VERBOSE)

# Cas 2 : "succession vacante de NOM, Pr√©noms"
RX_SV_NP = re.compile(rf"""
    succession
    \s+(?:(?:r[√©e]put[√©e]e?\s+)?vacante|en\s+d[√©e]sh[√©e]rence)
    \s+de\s+
    (?:feu[e]?\s+)?(?:M(?:onsieur|me|adame)?\.?\s+)? 
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?=\s*(?:\(|,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+n√©\(e\)|\s+[A-Z√â√à√ä√Ä√Ç]))
""", re.IGNORECASE | re.VERBOSE)

# Cas 3 : fallback g√©n√©rique (attrape-tout)
RX_SV_ANY = re.compile(rf"""
    succession
    \s+(?:vacante|en\s+d[√©e]sh[√©e]rence)
    \s+de\s+
    (?:M(?:me|adame|onsieur)?\.?\s+)?      # civilit√© optionnelle
    (?P<full>
        (?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+\s+)+
        [A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+
    )
    (?=\s*(?:\(|,|;|\.|\)|$|\s+n√©|\s+n√©e|\s+domicili√©|\s+d√©c√©d√©|\s+[A-Z√â√à√ä√Ä√Ç]))

""", re.IGNORECASE | re.VERBOSE)



RX_SV_FEU_PAIRE = re.compile(
    r"(?:succession\s+de\s+feu|√†\s+la\s+succession\s+de\s+feu).{0,30}?"
    r"(?:M(?:onsieur)?|Madame)?\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)[,\s]+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)",
    re.IGNORECASE,
)

RX_SV_FEU_VARIANTES = re.compile(
    r"(?:succession\s+(?:d√©clar√©e\s+)?vacante\s+de\s+feu|succession\s+de\s+feu|√†\s+la\s+succession\s+"
    r"de\s+feu)\s*:?\s*(?:M(?:onsieur)?|Madame)?\.?\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+"
    r"[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){1,4})",
    re.IGNORECASE,
)

RX_SRV_M_RN = re.compile(
    r"succession\s+r√©put√©e\s+vacante\s+de\s+M\.?\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\- ]+?)(?=\s*\(RN)",
    re.IGNORECASE,
)

RX_ADMIN_SV_SPEC = re.compile(
    r"administrateur\s+provisoire\s+√†\s+succession,?\s+de\s+(?:Monsieur|Madame|M\.|Mme)?\s+"
    r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){1,4})",
    re.IGNORECASE,
)

RX_SV_PART_VAC = re.compile(
    r"succession\s+partiellement\s+vacante\s+de\s+(?:Monsieur|Madame|M\.|Mme)?\s*"
    r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){1,4})",
    re.IGNORECASE,
)

RX_ADMIN_SV_VAC_ALT = re.compile(
    r"administrateur\s+provisoire\s+√†\s+succession\s+vacante,?\s+de\s+(?:Monsieur|Madame|M\.|Mme)?\s*"
    r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){1,4})",
    re.IGNORECASE,
)

RX_SV_NE_LE = re.compile(
    r"succession?\s+de\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s'‚Äô\-]+?),\s*(n√©\(e\)?|n√©|n√©e)\s+le",
    re.IGNORECASE,
)



RX_SV_DESHERENCE_SIMPLE = re.compile(
    r"succession?\s+(?:en\s+d[√©e]sh[√©e]rence\s+)?de\s+"
    r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s'‚Äô\-,]+?)"
    r"(?=\s+(?:n√©|n√©e|domicili√©|domicili√©e|d√©c√©d√©|d√©c√©d√©e|est|sans\s+laisser))",
    re.IGNORECASE,
)

RX_ADMIN_PROV_SUCC_DE = re.compile(
    r"administrateur\s+provisoire\s+√†\s+la\s+succession\s+de\s*:?\s*"
    r"(?:M(?:onsieur)?\.?\s+)?"
    r"(?:de\s+)?([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+){1,5})",
    re.IGNORECASE,
)


RX_SRV_NOMPRENOM = re.compile(
    r"succession\s+r√©put√©e\s+vacante\s+de\s+(?:M(?:onsieur)?\.?|Madame)?\s*"
    r"(?:de\s+)?([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)",
    re.IGNORECASE,
)


RX_SV_MONSIEUR_PN = re.compile(
    r"succession\s+(?:vacante|en\s+d[√©e]sh[√©e]rence)?\s+de\s+Monsieur\s+"
    r"(?:de\s+)?([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)*)\s+"
    r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'‚Äô\-]+)",
    re.IGNORECASE,
)


# =======================
#      EN CAUSE DE
# =======================
# Bloc "En cause de : ‚Ä¶ (jusqu'√† Contre : / Intim√©s : / fin)"
RX_EN_CAUSE_BLOCK = re.compile(
    r"en\s*cause\s*de\s*:?\s*(?P<bloc>.+?)(?=\b(?:contre|intim[√©e]s?|d√©fendeur|defendeur|d√©fenderesse|defenderesse)"
    r"\b\s*:|$)",
    re.IGNORECASE | re.DOTALL
)

# Items "NOM, Pr√©noms" avec num√©rotation et RN optionnel
RX_EN_CAUSE_ITEM_NP = re.compile(rf"""
    (?:^|\s*;\s*)                     # d√©but d'item (d√©but bloc ou apr√®s ;)
    (?:\d+\s*[\.\)]\s*)?              # "1." / "2)" optionnel
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?:\s*\(\s*{RN_TOKEN_ANY}\b[^)]*\))?   # (RN/NRN/NN ‚Ä¶) optionnel
""", re.IGNORECASE | re.VERBOSE)

# Items "Pr√©noms NOM" (au cas o√π) avec civilit√© et RN optionnels
RX_EN_CAUSE_ITEM_PN = re.compile(rf"""
    (?:^|\s*;\s*)
    (?:\d+\s*[\.\)]\s*)?
    (?:Monsieur|Madame|M(?:r|me)?\.?)?\s*
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?:\s*\(\s*{RN_TOKEN_ANY}\b[^)]*\))?
""", re.IGNORECASE | re.VERBOSE)

RX_NOM_MAJ_COMMA_PRENOMS = re.compile(rf"""
    (?P<nom>{UPWORD})\s*,\s*
    (?P<prenoms>{PRENOMS_BLK_BIS})
""", re.VERBOSE)


RX_EN_CAUSE_DE_NOM = re.compile(
    r"""
    en\s*cause\s*de\s*:?\s*                 # libell√© 'EN CAUSE DE :'
    (?P<nom>[^,\n\r]+?)\s*,\s*              # nom(s) de famille en bloc avant la virgule
    (?P<prenoms>(?:[A-Z√Ä-√ñ√ò-√û][a-z√†-√∂√∏-√ø'‚Äô\-]+
                 (?:\s+[A-Z√Ä-√ñ√ò-√û][a-z√†-√∂√∏-√ø'‚Äô\-]+){0,3})) # 1 √† 4 pr√©noms
    """,
    re.IGNORECASE | re.VERBOSE,
)
# En cause de : Monsieur Pr√©nom(s) NOM (RN/NN/NRN optionnel)
RX_EN_CAUSE_PN = re.compile(rf"""
    en\s+cause\s+de\s*:\s*
    (?:Monsieur|Madame|M(?:r|me)?\.?)\s+
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?:\s*[,;]?\s*\(?(?:{RN_TOKEN})\)?\s*[\d.\-/\s]{{6,}})?   # RN/NN/NRN optionnel
    (?=\s*(?:,|;|\.|\(|\)|\bdomicili|\bn√©|\bdec|$))          # stop propre
""", re.IGNORECASE | re.VERBOSE)

# Variante ¬´ NOM, Pr√©noms ¬ª (au cas o√π l‚Äôordre est invers√©)
RX_EN_CAUSE_NP = re.compile(rf"""
    en\s+cause\s+de\s*:\s*
    (?:Monsieur|Madame|M(?:r|me)?\.?)\s+
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?:\s*[,;]?\s*\(?(?:{RN_TOKEN})\)?\s*[\d.\-/\s]{{6,}})?   # RN/NN/NRN optionnel
    (?=\s*(?:,|;|\.|\(|\)|\bdomicili|\bn√©|\bdec|$))
""", re.IGNORECASE | re.VERBOSE)

# =======================
#      CONDAMNE
# =======================
# 1) Forme NP avec virgule : "le nomm√© : NOM, Pr√©noms"
RX_CONDAMNE_LE_NOMME_NP = re.compile(rf"""
    condamn[√©√©e]\s+                # a condamn√© / a √©t√© condamn√©(e) (souple)
    (?:par\s+)?(?:la\s+)?(?:cour|tribunal)?\s*   # optionnel, tol√©rant
    .*?\b(?:le|la)\s+nomm[√©e]\s*   # le/la nomm√©(e)
    [:‚Äì-]?\s*                      # : ou tiret optionnel
    (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
    (?=\s*(?:,|;|\.|\(|\)|\bn√©|\bnee|\bn√©\(e\)|{RN_TOKEN}|\bRR?N\b|$))
""", re.IGNORECASE | re.VERBOSE | re.DOTALL)

# 2) Forme PN (au cas o√π l‚Äôordre appara√Æt sans virgule) : "le nomm√© : Pr√©noms NOM"
RX_CONDAMNE_LE_NOMME_PN = re.compile(rf"""
    condamn[√©√©e]\s+.*?\b(?:le|la)\s+nomm[√©e]\s*[:‚Äì-]?\s*
    (?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK})
    (?=\s*(?:,|;|\.|\(|\)|\bn√©|\bnee|\bn√©\(e\)|{RN_TOKEN}|\bRR?N\b|$))
""", re.IGNORECASE | re.VERBOSE | re.DOTALL)



def format_nom_prenom(nom: str, prenoms: str) -> str:
    """
    Formate un couple (nom, prenoms) en "Pr√©nom(s) Nom".
    Nettoie civilit√©s et espaces.
    """
    if not nom or not prenoms:
        return None

    # Supprimer civilit√©s et titres √©ventuels
    civilites = r"^(Madame|Monsieur|M(?:me|r)?|Ma√Ætre|Me|M\.|Mme\.)\s+"
    nom = re.sub(civilites, "", nom, flags=re.IGNORECASE).strip()
    prenoms = re.sub(civilites, "", prenoms, flags=re.IGNORECASE).strip()


    # Normalisation espaces
    nom = " ".join(nom.split())
    prenoms = " ".join(prenoms.split())

    return f"{prenoms} {nom}".strip()


# Supprime un doublon exact au tout d√©but ou √† la toute fin de la cha√Æne.
# Exemple 'Jean Jean Dupont' -> 'Jean Dupont' ; 'Dupont Marc Marc' -> 'Dupont Marc'
# Ne touche pas aux pr√©noms compos√©s type 'Jean-Baptiste'
def clean_doublons_debut_fin(s: str) -> str:

    s = _norm_spaces(s)
    if not s:
        return s
    parts = s.split()

    # doublon en t√™te
    if len(parts) >= 2 and parts[0].lower() == parts[1].lower():
        parts = parts[1:]

    # doublon en fin
    if len(parts) >= 2 and parts[-1].lower() == parts[-2].lower():
        parts = parts[:-1]

    return " ".join(parts)


def extract_name_from_text(text, keyword, doc_id):
    return extract_name_before_birth(text, keyword, doc_id)


def invert_if_comma(s: str) -> str:
    if "," in s:
        left, right = [p.strip() for p in s.split(",", 1)]
        if re.fullmatch(UPWORD, left):  # NOM en majuscules
            return f"{right} {left}"
    return s

def _norm_spaces(s: str) -> str:
    return re.sub(r"\s+", " ", s).strip()


#Supprime les initiales isol√©es d‚Äôune cha√Æne (ex: "J. Dupont", "A B. Martin").
# - D√©coupe la cha√Æne en tokens (mots s√©par√©s par des espaces).
# - Filtre tous les tokens qui sont une seule lettre (maj/min) optionnellement suivie d‚Äôun point.
#   Regex : r"[A-Za-z]\.?" ‚Üí une lettre entre A‚ÄìZ ou a‚Äìz suivie √©ventuellement d‚Äôun ".".
#   - Rejoint les tokens restants avec des espaces.
#   - Si tout a √©t√© supprim√©, retourne la cha√Æne originale pour √©viter de renvoyer vide.
def _drop_single_letter_initials(s: str) -> str:

    tokens = s.split()
    keep = [t for t in tokens if not re.fullmatch(r"[A-Za-z]\.?", t)]
    return " ".join(keep) if keep else s


def group_names_for_meili(noms_nettoyes: list[str]):
    """
    Regroupe les variantes d‚Äôun m√™me nom en {canonical, aliases},
    en respectant l‚Äôordre d‚Äôapparition dans nom_list.
    """
    if not noms_nettoyes:
        return {"records": [], "canonicals": [], "aliases_flat": []}

    # üîÑ D√©duplication simple en gardant l‚Äôordre
    seen = set()
    ordered = []
    for n in noms_nettoyes:
        norm = n.strip()
        if not norm:
            continue
        key = norm.lower()
        if key not in seen:
            seen.add(key)
            ordered.append(norm)

    # üëë Canonical = premier √©l√©ment, Aliases = le reste
    canonical = ordered[0]
    aliases = ordered[1:]

    return {
        "records": [{"canonical": canonical, "aliases": aliases}],
        "canonicals": [canonical],
        "aliases_flat": ordered,
    }


def nettoyer_noms_avances(noms, longueur_max=80):
    """
        Fonction avanc√©e de nettoyage et de normalisation de noms extraits de texte libre.

        √âtapes effectu√©es :
        ---------------------------------------------------------------------
        1. Suppression des pr√©fixes contextuels :
            - Ex. : "n√© le...", "pour la succession de...", etc.
            - D√©tection sp√©ciale pour certaines phrases juridiques longues.

        2. Extraction du nom √† partir de formulations types :
            - Ex. : "succession de Jean Dupont" ‚Üí "Jean Dupont"

        3. Nettoyage syntaxique :
            - Suppression des titres (Monsieur, Madame, etc.)
            - Suppression des chiffres, formats num√©riques (ex. "12/3", "45-A")
            - Nettoyage des ponctuations parasites (| ; :)

        4. Reformatage du nom :
            - Inversion automatique si au format "NOM, Pr√©nom"
            - Suppression des doublons ("Dupont Dupont" ‚Üí "Dupont")
            - Uniformisation des espaces

        5. G√©n√©ration d'une cl√© normalis√©e :
            - Minuscules
            - Sans accents
            - Espaces uniformis√©s
            - Objectif : comparer les noms m√™me s'ils sont formul√©s diff√©remment

        6. Filtres d‚Äôexclusion :
            - Supprime les noms contenant certains termes juridiques ou administratifs non pertinents
            - Ignore les noms trop longs (> longueur_max)
            - Ignore les noms trop courts sauf s‚Äôils ressemblent √† un NOM majuscule valide (UPWORD)

        7. D√©tection et √©limination des doublons :
            - √âvite d'ajouter plusieurs fois des noms tr√®s similaires ou inclus les uns dans les autres

        8. Filtrage final :
            - Exclut les noms contenant "greffier" (pas une personne cible)

        Retour :
            - Une liste de noms nettoy√©s et pertinents pour traitement ult√©rieur
        """

    titres_regex = r"\b(madame|monsieur|mme|mr)\b[\s\-]*"

    # Termes √† ignorer
    termes_ignores = ["la personne", "personne", "Par ordonnance", "de la", "dans les",
                      "feu M", "feu", "feue", "d√©sign√© Ma√Ætre", "pr√©sente publication",
                      "de sexe masculin", "de sexe f√©minin", "de sexe feminin",  # <-- corrig√©
                      "sexe masculin", "sexe f√©minin", "sexe feminin",
                      "masculin", "f√©minin", "feminin", "comptabilit√©", "intention frauduleuse", "avoir d√©tourn√©",
                      "avoir detourne", "contrevenu", "dispositions", "partie appelante", "repr√©sent√©e", "appelante",
                      "l'etat belge spf finances", "l etat belge spf finances", "L'ETAT BELGE SPF FINANCES",
                      "etat belge", "spf finances"]


    def invert_if_comma(s: str) -> str:
        if "," in s:
            left, right = [p.strip() for p in s.split(",", 1)]
            # inverser seulement si la partie avant la virgule ressemble √† un NOM en majuscules
            if re.fullmatch(r"[A-Z√â√à√Ä√Ç√ä√é√î√õ√á√Ñ√ã√è√ñ√ú≈∏'‚Äô\-]+", left):
                return f"{right} {left}"
        return s


    def extraire_nom_depuis_phrase(nom):
        patterns = [
            r"pour la succession de\s+(.*)",
            r"en possession de la succession de\s+(.*)",
            r"succession\s+(?:en\s+d[√©e]sh[√©e]rence|vacante)?\s+de\s+(.*)",
            r"en qualit√© de curateur √† la succession vacante de\s+(.*)",
            r"la succession vacante de\s+(.*)",
            r"le\s+juge\s+de\s+paix\s+du\s+canton\s+de\s+vis√©\s+a\s+d√©sign√©\s+(?:√†\s+)?(.*)",


        ]
        for pattern in patterns:
            match = re.search(pattern, nom, flags=re.IGNORECASE)
            if match:
                return match.group(1).strip()
        return nom.strip()


    def nettoyer_et_normaliser(nom):
        # üëâ extraire un √©ventuel nom apr√®s "succession de ..."
        extrait = extraire_nom_depuis_phrase(nom)
        if extrait != nom:  # √©viter r√©cursion infinie
            nom = extrait

        # üÜï suppression de blocs r√©p√©t√©s 2√ó (OCR ‚Üí "Tasnier Anne Marie Tasnier Anne Marie")
        tokens = nom.split()
        half = len(tokens) // 2
        if half > 2 and tokens[:half] == tokens[half:]:
            nom = " ".join(tokens[:half])

        # --- Nettoyage neutre ---
        for rx in STRIP_PHRASES_REGEX:
            nom = rx.sub(" ", nom)

        # suppression pr√©fixes "n√© ..." etc.
        nom = re.sub(r"^\s*de\s+(?=[A-Z][a-z])", "", nom)
        nom = re.sub(rf"^\s*{PREFIXES}\s+", "", nom, flags=re.IGNORECASE)

        # suppression titres
        nom = re.sub(titres_regex, '', nom, flags=re.IGNORECASE)

        # suppression chiffres et formats "12/3", "45-A"...
        nom = re.sub(r"\d+", "", nom)
        nom = re.sub(r"\s*[\/\-]\s*\d+\w*", "", nom)

        # coupe le contexte apr√®s le nom
        nom = re.split(CONTEXT_CUT, nom, 1, flags=re.IGNORECASE)[0]

        # normalisation ponctuation/espace
        nom = nom.replace(";", " ").replace("|", " ").replace(":", " ")
        nom = re.sub(r"\s+", " ", nom).strip(" ,;-")

        # inversion √©ventuelle "NOM, Pr√©nom"
        nom = invert_if_comma(nom)

        # suppression doublon final ("Moll Moll" ‚Üí "Moll")
        nom = re.sub(r"\b([A-Za-z√Ä-√ø'-]+)\s+\1\b$", r"\1", nom, flags=re.IGNORECASE)

        # g√©n√©ration cl√© normalis√©e
        nom_normalise = ''.join(
            c for c in unicodedata.normalize('NFD', nom)
            if unicodedata.category(c) != 'Mn'
        ).lower().strip()
        nom_normalise = re.sub(r'\s+', ' ', nom_normalise)
        nom = re.sub(r'\s+', ' ', nom).strip()

        return nom.strip(), nom_normalise  # üîπ nom garde sa casse originale
    noms_nettoyes = []
    noms_normalises = []

    def _dedupe_tokens(nom: str) -> str:
        tokens = nom.split()
        seen = []
        for t in tokens:
            if not seen or seen[-1].lower() != t.lower():
                seen.append(t)
        return " ".join(seen)

    def _dedupe_blocks(n: str) -> str:
        tokens = n.split()
        half = len(tokens) // 2
        if half > 2 and tokens[:half] == tokens[half:]:
            return " ".join(tokens[:half])
        return n

    for nom in noms:

        nom_nettoye, norm = nettoyer_et_normaliser(nom)
        print(f"DEBUG NOM: brut='{nom}' ‚Üí nettoy√©='{nom_nettoye}' (norm='{norm}')")# üëâ √©tape anti-r√©p√©tition OCR
        nom_nettoye_dedup = _dedupe_tokens(nom_nettoye)
        nom_nettoye_dedup = _dedupe_blocks(nom_nettoye_dedup)
        nom_nettoye = nom_nettoye_dedup

        if any(terme.strip() in nom_nettoye.lower().strip() for terme in termes_ignores):
            continue
        if len(nom_nettoye) > longueur_max:
            continue
        if len(nom_nettoye.split()) > 6:
            continue
        # Accepte un token unique s'il ressemble √† un NOM en majuscules (UPWORD)
        if len(nom_nettoye.split()) < 2 and not re.fullmatch(UPWORD, nom_nettoye):
            continue

        to_remove = []
        dup = False
        for i, exist in enumerate(noms_normalises):
            if norm == exist:  # √©galit√© stricte seulement
                dup = True
                break
            # si tu veux vraiment supprimer la plus courte :
            if exist in norm:
                to_remove.append(i)

        if dup:
            continue
        for idx in reversed(to_remove):
            del noms_normalises[idx]
            del noms_nettoyes[idx]

        noms_nettoyes.append(nom_nettoye)
        noms_normalises.append(norm)
    # ‚ö†Ô∏è avant le return, applique le filtre
    filtres_nettoyes = []
    filtr√©s_normalises = []

    for nom_nettoye, norm in zip(noms_nettoyes, noms_normalises):
        if "greffier" not in nom_nettoye.lower() and "greffier" not in norm.lower():
            filtres_nettoyes.append(nom_nettoye)
            filtr√©s_normalises.append(norm)

    return filtres_nettoyes


def extract_name_before_birth(texte_html, keyword, doc_id):

    dyn_log = setup_dynamic_logger(name="extraction_names", keyword=keyword)

    soup = BeautifulSoup(texte_html, 'html.parser')
    full_text = soup.get_text(separator=" ").strip()

    nom_list = LoggedList(full_text, doc_id, logger=dyn_log)
    # ----- pr√©somption d'absence √† l'√©gard de
    for m in RX_ABSENCE.finditer(full_text):
        nom = m.group("nom").strip()
        prenoms = m.group("prenoms").strip()
        nom_complet = f"{nom}, {prenoms}"
        nom_list.append(nom_complet, regex_name="RX_ABSENCE", m=m)

    # ----- curateurs a succession vacante de
    for m in RX_QUALITE_CURATEUR_SV_PN_NN.finditer(full_text):
        nom_list.append(
            f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
            regex_name="RX_QUALITE_CURATEUR_SV_PN_NN",
            m=m
        )
    # ‚Ä¶ plus loin dans l‚Äôextraction :
    for m in RX_QUALITE_CURATEUR_SV_PN.finditer(full_text):
        nom_list.append(
            f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
            regex_name="RX_QUALITE_CURATEUR_SV_PN",
            m=m
        )

    # ------- administrateur des biens de

    for m in re.finditer(
                r"administrateur\s+des\s+biens\s+de.{0,30}?(?:Monsieur|Madame)\s+"
                r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)",
                full_text,
                flags=re.IGNORECASE
        ):
            nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
            nom_list.append(nom_complet, regex_name="match_admin_biens", m=m)

    for m in RX_INTERDIT_A.finditer(full_text):
        nom = (m.group('nom') or m.group('nom2')).strip()
        prenoms = (m.group('prenoms') or m.group('prenoms2')).strip()
        nom_list.append(f"{nom}, {prenoms}", regex_name="RX_INTERDIT_A", m=m)

    for lenomme in RX_LE_NOMME_NP.finditer(full_text):
        nom_list.append(f"{lenomme.group('nom').strip()}, {lenomme.group('prenoms').strip()}",
                        regex_name="RX_LE_NOMME_NP", m=lenomme)

    for rxnrnp in RX_NR_NP.finditer(full_text):
        nom_list.append(f"{rxnrnp.group('nom').strip()}, {rxnrnp.group('prenoms').strip()}")

    for rxnpne in RX_NP_NE.finditer(full_text):
        nom_list.append(f"{rxnpne.group('nom').strip()}, {rxnpne.group('prenoms').strip()}")

    # ‚úÖ Corrig√© avec groupe nomm√© "full"
    for m in RX_SV_ANY.finditer(full_text):
        nom_list.append(m.group("full").strip(), regex_name="RX_SV_ANY", m=m)

    # ‚úÖ Corrig√©
    for m in RX_SV_NP.finditer(full_text):
        nom_list.append(
            f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
            regex_name="RX_SV_NP", m=m
        )
    for m in RX_SV_PN_NN.finditer(full_text):
        nom_list.append(
            f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
            regex_name="RX_SV_PN_NN", m=m
        )
    # ‚úÖ Corrig√©
    for m in RX_SV_PN.finditer(full_text):
        nom_list.append(
            f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
            regex_name="RX_SV_PN", m=m
        )

    for m in RX_CURATEUR_SV_PN.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()} {m.group('prenoms').strip()}", regex_name="RX_CURATEUR_SV_PN", m=m)

    for m in RX_CURATEUR_SV_NP_NN.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()} {m.group('prenoms').strip()}", regex_name="RX_CURATEUR_SV_NP_NN", m=m)
    for m in RX_CURATEUR_SV_NP.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()} {m.group('prenoms').strip()}", regex_name="RX_CURATEUR_SV_NP", m=m)

    for m in RX_SV_FEU_PAIRE.finditer(full_text):
        nom_list.append(f"{m.group(1).strip()}, {m.group(2).strip()}", regex_name="RX_SV_FEU_PAIRE", m=m)

    # üîπ Ajout sp√©cifique pour : "mesures de protection √† l‚Äô√©gard de la personne et des biens de
    # l‚Äôint√©ress√© Pr√©nom Nom, n√© √† ..."
    for rxprotectioninteressene in RX_PROTECTION_INTERESSE_NE.finditer(full_text):
        nom_list.append(f"{rxprotectioninteressene.group('nom').strip()}, "
                        f"{rxprotectioninteressene.group('prenoms').strip()}",
                        regex_name="RX_PROTECTION_INTERESSE_NE", m=m)

    for m in RX_SV_FEU_VARIANTES.finditer(full_text):
        nom_list.append(m.group(1).strip(), regex_name="RX_SV_FEU_VARIANTES", m=m)

    for rxsrvmrn in RX_SRV_M_RN.finditer(full_text):
        nom_list.append(rxsrvmrn.group(1).strip(), regex_name="RX_SRV_M_RN", m=m)

    for m in RX_ADMIN_SV_SPEC.finditer(full_text):
        parts = m.group(1).strip().split()
        if len(parts) >= 2:
            nom_list.append(f"{parts[-1]}, {' '.join(parts[:-1])}", regex_name="RX_ADMIN_SV_SPEC", m=m)

    for m in RX_SV_PART_VAC.finditer(full_text):
        parts = m.group(1).strip().split()
        if len(parts) >= 2:
            nom_list.append(f"{parts[-1]}, {' '.join(parts[:-1])}", regex_name="RX_SV_PART_VAC", m=m)

    for m in RX_ADMIN_SV_VAC_ALT.finditer(full_text):
        parts = m.group(1).strip().split()
        if len(parts) >= 2:
            nom_list.append(f"{parts[-1]}, {' '.join(parts[:-1])}", regex_name="RX_ADMIN_SV_VAC_ALT", m=m)
        # "administrateur des biens de Monsieur/Madame NOM, Pr√©nom"


    for m in RX_SV_NE_LE.finditer(full_text):
        nom_list.append(m.group(1).strip(), regex_name="RX_SV_NE_LE", m=m)
    for m in RX_SV_DESHERENCE_SIMPLE.finditer(full_text):
        nom_list.append(m.group(1).strip(), regex_name="RX_SV_DESHERENCE_SIMPLE", m=m)

    for m in RX_ADMIN_PROV_SUCC_DE.finditer(full_text):
        nom_list.append(m.group(1).strip(), regex_name="RX_ADMIN_PROV_SUCC_DE", m=m)

    for m in RX_SRV_NOMPRENOM.finditer(full_text):
        nom_list.append(f"{m.group(2).strip()}, {m.group(1).strip()}", regex_name="RX_SRV_NOMPRENOM", m=m)

    for m in RX_PROTECTION_INTERESSE_NOM_SEUL.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
                        regex_name="RX_PROTECTION_INTERESSE_NOM_SEUL", m=m)

    for m in RX_SV_MONSIEUR_PN.finditer(full_text):
        nom_list.append(f"{m.group(2).strip()}, {m.group(1).strip()}")

    for m in RX_EN_CAUSE_DE_NOM.finditer(full_text):
        nom_list.append(f"{m.group(2).strip()}, {m.group(1).strip()}", regex_name="RX_EN_CAUSE_DE_NOM",
                        m=RX_EN_CAUSE_DE_NOM)

    for m in RX_EN_CAUSE_PN.finditer(full_text):
        nom_list.append(f"{m.group('prenoms').strip()}, {m.group('nom').strip()}",
                        regex_name="RX_EN_CAUSE_PN", m=RX_EN_CAUSE_PN)

    for m in RX_EN_CAUSE_NP.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
                        regex_name="RX_EN_CAUSE_NP", m=RX_EN_CAUSE_NP)

    for m in RX_CONDAMNE_LE_NOMME_NP.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
                        regex_name="RX_CONDAMNE_LE_NOMME_NP", m=RX_CONDAMNE_LE_NOMME_NP)

    for m in RX_CONDAMNE_LE_NOMME_PN.finditer(full_text):
        nom_list.append(f"{m.group('prenoms').strip()}, {m.group('nom').strip()}",
                        regex_name="RX_CONDAMNE_LE_NOMME_PN", m=RX_CONDAMNE_LE_NOMME_PN)
    # (A) Civilit√© + Pr√©noms + NOM suivi d‚Äôun (RN ‚Ä¶)
    for m in RX_CIVILITE_PN_RN.finditer(full_text):
        nom_list.append(f"{m.group('prenoms').strip()}, {m.group('nom').strip()}")

    # (B) ‚Äúappel interjet√© par ‚Ä¶‚Äù (ou ‚Äúappel de ‚Ä¶‚Äù), civilit√© + Pr√©noms + NOM (RN optionnel)
    for m in RX_APPEL_PAR_CIVILITE.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}")

    # (C) ‚Äúrelativement √† la personne de ‚Ä¶‚Äù, civilit√© + Pr√©noms + NOM (RN optionnel)
    for m in RX_REL_PERSONNE_DE.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}")

    for m in RX_NOM_VIRGULE.finditer(full_text):
        patronyme = m.group("nom").strip()
        prenoms = m.group("prenoms").strip()
        nom_complet = f"{patronyme} {prenoms}"
        nom_list.append(nom_complet)

    # ==============================
    #      NOMS AVEC RN
    # ==============================
    # D√©tecte les d√©clarations du type :
    # "d√©clare NOM, Pr√©nom(s) (RN ...)"
    # Extrait le nom et les pr√©noms de la personne d√©clar√©e, suivis d‚Äôun identifiant RN (RN, RRN, NRN, etc.)
    # Exemple :
    #     "d√©clare DUPONT, Jean Pierre (RRN 12.12.2000-123.45)"
    RX_DECL_NP_RRN = re.compile(rf"""
        \bd√©clare\b\s+
        (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
        \s*\(\s*{RN_TOKEN_ANY}.*?\)
    """, re.IGNORECASE | re.VERBOSE)
    # üìå Variante de d√©claration incluant une civilit√© :
    # "d√©clare Monsieur/Madame NOM, Pr√©nom(s) (RN ...)"
    # ‚û§ Extrait le nom et les pr√©noms de la personne, pr√©c√©d√©s d'une civilit√©,
    #     et suivis d‚Äôun identifiant RN (RN, RRN, NRN, etc.)
    # Exemple :
    #     "d√©clare Madame DUPONT, Jeanne Louise (RRN 01.01.1980-123.45)"
    RX_DECL_CIVILITE_NP_RRN = re.compile(rf"""
        \bd√©clare\b\s+
        (?:Monsieur|Madame|M(?:r|me)?\.?)\s+
        (?P<nom>{NOM_BLOCK})\s*,\s*(?P<prenoms>{PRENOMS_BLK})
        \s*\(\s*{RN_TOKEN_ANY}.*?\)
    """, re.IGNORECASE | re.VERBOSE)

    # üîπ 0.ter : Cas "Madame/Monsieur NOM, Pr√©nom, n√©(e) √† ..."
    match_mp = re.findall(
        r"(?:Madame|Monsieur)\s+"
        r"(?P<prenom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"  # vrai pr√©nom
        r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)"  # vrai nom
        r"\s*,\s*(n√©|n√©e|n√©\(e\))\s+√†",
        full_text,
        re.IGNORECASE
    )
    for prenom, nom, _ in match_mp:
        nom_list.append(f"{nom}, {prenom}")

    # üîπ 0.ter.a : Cas "‚Ä¶ concernant NOM, Pr√©nom :"
    match_concernant = re.findall(
        r"\bconcernant\s+([A-Z√Ä-≈∏][A-Z√Ä-≈∏\-']+)\s*,\s*([A-Z√Ä-√ø][A-Za-z√Ä-√ø\-'\s]+?)\s*:",
        full_text,
        re.IGNORECASE
    )
    for nom, prenoms in match_concernant:
        nom_list.append(f"{nom.strip()}, {prenoms.strip()}")

    # üîπ 0.ter.b : Cas "Madame/Monsieur/Me NOM, Pr√©nom, n√©e/n√© ‚Ä¶"
    # Cas : administrateur avec pr√©nom + nom
    match_admin_nomprenom = re.findall(
        rf"(?:Madame|Monsieur|M(?:me|lle)?|Mme|Mlle|Ma(?:√Ætre|itre)|Me)\s+(?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK}),?\s*(?:domicili√©|demeurant|ayant|r√©sidant)",
        full_text,
        flags=re.IGNORECASE
    )
    for nom, prenoms in match_admin_nomprenom:
        nom_list.append(f"{nom.strip()}, {prenoms.strip()}")

    match_incapable_nom = re.finditer(
        r"(.{1,60})\b(est\s+(?:d√©clar√©\s+)?incapable)\b",
        full_text,
        re.IGNORECASE
    )
    for m in match_incapable_nom:
        avant = m.group(1).strip()

        # Essaye d'extraire jusqu'√† 4 composants pour le nom complet
        nom_candidat = re.search(
            r"(?:Monsieur|Madame|Mr|Mme)?\s*((?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]{2,}\s*){1,4})$",
            avant,
            re.IGNORECASE
        )
        if nom_candidat:
            nom_brut = nom_candidat.group(1).strip()
            nom_parts = nom_brut.split()
            if len(nom_parts) >= 2:
                # derni√®re partie = nom de famille, le reste = pr√©noms
                nom_complet = f"{nom_parts[-1]}, {' '.join(nom_parts[:-1])}"
                nom_list.append(nom_complet.strip())
    # üîπ Cas : "1) Nom et pr√©noms : NOM, Pr√©nom(s)"
    for m in re.finditer(
            r"\b\d\)\s*Nom\s+et\s+pr√©noms\s*:\s*(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s*(?P<prenoms>(?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s*){1,4})",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_structured_nom_prenom", m=m)

    # üîπ Cas : "le nomm√© <code> NOM, Pr√©nom(s), NRN ..."
    for m in re.finditer(
            r"le nomm√©\s*:?\s*\S*\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s*(?P<prenoms>(?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s*){1,5}),?\s+NRN",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_le_nommer_nrn", m=m)

    # üîπ 1. "NOM, n√©(e) le jj/mm/aaaa √† VILLE"
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+),\s*(?P<civilite>n√©\(e\)?|n√©|n√©e)\s*le\s*\d{2}/\d{2}/\d{4}\s*√†\s*[A-Za-z\s\-']+",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match1", m=m)

    # üîπ 2. "NOM, n√©(e) le aaaa-mm-jj √† VILLE"
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+),\s*(?P<civilite>n√©\(e\)?|n√©|n√©e)\s*le\s*\d{4}-\d{2}-\d{2}\s*√†\s*[A-Za-z\s\-']+",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match2", m=m)

    # üîπ 3. "NOM, n√©(e) le jj mois aaaa √† VILLE"
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+),\s*(?P<civilite>n√©\(e\)?|n√©|n√©e)"
            r"\s*le\s*\d{1,2}\s+\w+\s+\d{4}\s*√†\s*[A-Za-z\s\-']+",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match3", m=m)

    # üîπ 4. Cas l√©ger : "NOM n√© √†"
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+)\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match4", m=m)

    # üîπ 5. "NOM, n√©(e) √† VILLE le jj mois aaaa"
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+),\s*(?P<civilite>n√©\(e\)?|n√©|n√©e)\s+√†\s+[A-Za-z\s\-']+\s+le\s+\d{1,2}\s+\w+\s+\d{4}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match5", m=m)

    # Variante
    for m in re.finditer(
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\s\-']+),\s*(?P<civilite>n√©\(e\)?|n√©|n√©e)\s+√†\s+le\s+\d{1,2}\s+\w+\s+\d{4}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match6", m=m)

    # üîπ 7. "Monsieur|Madame Pr√©nom NOM, n√© √†"
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match7", m=m)

    # üîπ 7b. Variante sans civilit√©
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match7b", m=m)

    # üîπ 7d. Cas : "Monsieur Pr√©nom NOM; n√© √† ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+);?\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match7d", m=m)

    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+n√©\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match7c", m=m)

    # üîπ Cas : "Monsieur NOM, Pr√©nom; n√© √† ..."
    for m in re.finditer(
            rf"(?:Monsieur|Madame)\s+(?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK});",
            full_text,
            flags=re.IGNORECASE
    ):
        prenoms = m.group("prenoms")
        nom = m.group("nom")
        nom_complet = f"{nom.strip()}, {prenoms.strip()}"
        nom_list.append(nom_complet)

    for m in re.finditer(
            rf"(?:Monsieur|Madame)\s+(?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK});?\s+(n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            flags=re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_semicolon", m=m)

    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s*(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+);\s+(n√©|n√©e)\s+√†",
            full_text,
            flags=re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_semi", m=m)

    for m in re.finditer(
            r"a\s+condamn√©\s*:?\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)",
            full_text,
            re.IGNORECASE
    ):
        nom, prenom = m.group(1), m.group(2)
        nom_complet = f"{nom.strip()}, {prenom.strip()}"
        nom_list.append(nom_complet, regex_name="match_condamne", m=m)
    # üîπ Cas sp√©cial : "Monsieur NOM Pr√©nom; n√© √† ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+);\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_pg_semicolon", m=m)

    # üîπ Cas : "Monsieur NOM, Pr√©nom; pr√©sent"
    for m in re.finditer(
            rf"(?:Monsieur|Madame)\s+(?P<prenoms>{PRENOMS_BLK})\s+(?P<nom>{NOM_BLOCK}),\s+pr√©sent",
            full_text,
            flags=re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_pg", m=m)



    # "des biens/personne de Monsieur/Madame ..."
    for m in re.finditer(
            r"(?:des\s+biens\s+et\s+de\s+la\s+personne|de\s+la\s+personne\s+et\s+des\s+biens|des\s+"
            r"biens\s+de|de\s+la\s+personne\s+de)\s+.{0,30}?(?:M(?:onsieur|me)?\s+)?"
            r"(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)",
            full_text,
            flags=re.IGNORECASE
    ):
        nom_complet = f"{m.group('nom').strip()}, {m.group('prenoms').strip()}"
        nom_list.append(nom_complet, regex_name="match_biens_personne", m=m)

    # üîπ Cas : "1) Nom et pr√©noms : Pr√©nom NOM ..."
    for m in re.finditer(
            r"""\d\)\s*Nom\s+et\s+pr√©noms?\s*:\s*
            (?P<nomcomplet>
                (?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+){0,6}   # jusqu'√† 7 tokens (6 + 1 final)
                [A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+
            )
            (?=\s*(?:\.|,|;|\d\)|$))                     # stop avant . , ; 2) ou fin
            """,
            full_text,
            flags=re.IGNORECASE | re.VERBOSE
    ):
        nom_list.append(
            m.group("nomcomplet").strip(),
            regex_name="match_structured_numbered",
            m=m
        )
    # üîπ Cas sp√©cial : "NOM, Pr√©nom(s)" (NOM en majuscules suivi d'une virgule)
    for m in RX_NOM_MAJ_COMMA_PRENOMS.finditer(full_text):
        nom = m.group("nom").strip()
        prenoms = m.group("prenoms").strip()
        nom_complet = f"{nom}, {prenoms}"
        nom_list.append(nom_complet, regex_name="RX_NOM_MAJ_COMMA_PRENOMS", m=m)
    # üîπ 0.quater : "[Pr√©nom NOM], n√©(e) √† ..."

    for m in re.finditer(
            r"\b(?P<nomcomplet>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nomcomplet").strip(), regex_name="match8", m=m)

    # üîπ 8. "Pr√©nom NOM, n√©(e) le <date>"
    for m in re.finditer(
            r"\b(?P<nomcomplet>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+le\s+\d{1,2}\s+\w+\s+\d{4}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nomcomplet").strip(), regex_name="match9", m=m)

    # üîπ 9. "Monsieur/Madame NOM Pr√©nom, inscrit ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+inscrit(?:e)?\s+au\s+registre\s+national",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match10", m=m)

    # "NOM Pr√©nom, RN ..., n√© √†"
    for m in re.finditer(
            r"\b(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+RN\s+\d{5,15},?\s+"
            r"(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match11", m=m)

    # "Monsieur/Madame Pr√©nom NOM, ... personne √† prot√©ger"
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),[\s\S]{0,300}personne\s+(?:√†\s+prot√©ger|prot√©g√©e)",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match12", m=m)

    # üîπ 13. "Pr√©nom NOM, ayant pour num√©ro RN ..., n√© √† ..."
    for m in re.finditer(
            r"\b(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),"
            r"\s+ayant\s+pour\s+num√©ro\s+de\s+registre\s+national\s+\d{11,12},\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match13", m=m)

    # üîπ 10. "Pr√©nom NOM, RN <num√©ro>, n√©(e) √† ..."
    for m in re.finditer(
            r"\b(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+"
            r"RN\s+\d{9,15},?\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+√†",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(m.group("nom").strip(), regex_name="match14", m=m)

    # üîπ 11. "Monsieur/Madame Pr√©nom NOM, registre national num√©ro ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+registre\s+national\s+num√©ro\s+\d{9,15}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match15", m=m)

    # "Monsieur/Madame Pr√©nom NOM ... plac√© sous un r√©gime ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),[\s\S]{0,200}?(?:plac√©|plac√©e)\s+"
            r"sous\s+un\s+r√©gime\s+de\s+repr√©sentation",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match16", m=m)

    # Variante avec "n√© √† ... le ..."
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s*n√©\s+√†\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+"
            r"le\s+\d{1,2}\s+\w+\s+\d{4}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match_fixed", m=m)

    # "Monsieur NOM, Pr√©nom, n√© le <date>"
    for m in re.finditer(
            r"(?:Monsieur|Madame)\s+(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+"
            r"(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-\s]+?),\s+(?P<civilite>n√©|n√©e|n√©\(e\))\s+le\s+\d{2}/\d{2}/\d{4}",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match_mn_nomprenom", m=m)

    # "le nomm√© <code> - NOM Pr√©nom, NRN ..."
    for m in re.finditer(
            r"le nomm√©\s+\S+\s*[-‚Äì]\s*(?P<nom>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
            r"(?P<prenoms>[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+NRN",
            full_text,
            re.IGNORECASE
    ):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match_nom_nr_flexible",
                        m=m)

    # ‚úÖ Cas : "d√©clare l'absence de Monsieur NOM, Pr√©noms"
    for m in re.finditer(
            r"(?:d√©clare|a\s+d√©clar√©)\s+l'absence\s+de\s*:?\s*.{0,30}?"
            r"(?:Monsieur|Madame|M\.|Mme)?\s*"
            r"(?:de\s+)?([A-Z√â√à√ä√Ä√Ç'\-]+),?\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\- ]+)",
            full_text,
            flags=re.IGNORECASE
    ):
        nom, prenoms = m.group(1), m.group(2)
        nom_complet = f"{nom.strip()}, {prenoms.strip()}"
        nom_list.append(nom_complet, regex_name="match_absence", m=m)

    # üîπ Cas : "Monsieur Pr√©nom NOM NOM2 NOM3 (RN ...)"
    match_rn_nom = re.findall(
        r"(?:Monsieur|Madame)\s+((?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+){1,3}[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)\s+"
        r"\(RN\s+\d{2}[.\-/]\d{2}[.\-/]\d{2}",
        full_text,
        re.IGNORECASE
    )

    for full_nom in match_rn_nom:
        noms = full_nom.strip().split()
        if len(noms) >= 2:
            prenom = noms[0]
            nom = " ".join(noms[1:])
            nom_complet = f"{nom}, {prenom}"
            nom_list.append(nom_complet)

    match_appel_fonde = re.findall(
        r"d√©clare\s+fond√©\s+l[‚Äô']?appel\s+de\s+(?:Monsieur|Madame|Mr|Mme)?\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+(?:\s+"
        r"[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+){0,3})",
        full_text,
        flags=re.IGNORECASE
    )

    for nom_complet in match_appel_fonde:
        noms = nom_complet.strip().split()
        if len(noms) >= 2:
            prenom = noms[0]
            nom = " ".join(noms[1:])
            nom_list.append(f"{nom}, {prenom}")

    # ‚úÖ Cas : "succession vacante de M./Mme/Monsieur/Madame Pr√©nom NOM [Nom2 Nom3...]"
    # ‚úÖ Cas : "succession vacante de M./Mme/Monsieur/Madame Pr√©nom NOM [Nom2 Nom3...]"
    for m in re.finditer(
            r"succession\s+(?:vacante|en\s+d[√©e]sh[√©e]rence)?\s+de\s+(?:M(?:me|adame|onsieur)?\.?\s+)?"
            r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+){0,3})",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = m.group(1)
        nom_list.append(nom_complet.strip(), regex_name="match_sv_flexible", m=m)

    # ‚úÖ Cas : "√† la succession de M./Mme NOM [NOM2...]"
    for m in re.finditer(
            r"(?:√†\s+la\s+succession\s+de|succession\s+de)\s+"
            r"(?:M(?:me|adame|onsieur)?\.?\s+)?([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+(?:\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+){0,3})",
            full_text,
            re.IGNORECASE
    ):
        nom_complet = m.group(1)
        nom_list.append(nom_complet.strip(), regex_name="match_succession_simple", m=m)

    # üîπ Cas : "le nomm√© : 1492 C 2025 NOM, Pr√©nom, NRN ..."
    match_nom_nr = re.findall(
        r"le nomm√©\s*:\s*(?:\d+\s*[A-Z]\s*\d{4})\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+"
        r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+NRN\s+\d{2}[.\-/]\d{2}[.\-/]\d{2}[-\s.]\d{3}[.\-/]\d{2}",
        full_text,
        re.IGNORECASE
    )
    for nom, prenom in match_nom_nr:
        nom_complet = f"{nom.strip()}, {prenom.strip()}"
        nom_list.append(nom_complet)
        # üîπ Cas : "Nom pr√©nom : NOM, Pr√©nom"
    match_structured = re.findall(
        r"Nom\s+pr√©nom\s*:\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)",
        full_text,
        re.IGNORECASE
    )
    for nom, prenom in match_structured:
        nom_complet = f"{nom.strip()}, {prenom.strip()}"
        nom_list.append(nom_complet)

    # Cas "succession vacante de NOM, Pr√©nom"
    match_sv_nomprenom = re.findall(
        r"succession\s+vacante\s+de\s+(?:M(?:onsieur|me)?\s+)?([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\-']+),\s+"
        r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\-']+)",
        full_text,
        re.IGNORECASE
    )
    for nom, prenom in match_sv_nomprenom:
        nom_complet = f"{nom.strip()}, {prenom.strip()}"
        nom_list.append(nom_complet)

    # Cas "NOM, Pr√©nom, n√© √† VILLE le 3 septembre 1951"
    match_na_le = re.findall(
        r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\-']+),\s+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂\-']+),\s+(n√©|n√©e)\s+"
        r"√†\s+[A-Za-z\s\-']+\s+le\s+\d{1,2}\s+\w+\s+\d{4}",
        full_text,
        re.IGNORECASE
    )
    for nom, prenom, _ in match_na_le:
        nom_complet = f"{nom.strip()}, {prenom.strip()}"
        nom_list.append(nom_complet)

    match_nn_generic = re.findall(
        rf"((?:{PRENOMS_BLK}\s+{NOM_BLOCK})|(?:{NOM_BLOCK}\s+{PRENOMS_BLK}))"
        rf"[^()]{0, 70}\b{RN_TOKEN}\s*\d{{2}}[.\-/]\d{{2}}[.\-/]\d{{2}}[-\s.]?\d{{3}}[.\-/]\d{{2}}",
        full_text,
        re.IGNORECASE
    )
    for m in match_nn_generic:
        nom_list.append(m.strip())

    # üîπ Cas : "[Nom Pr√©nom] recouvre sa pleine capacit√©"
    matches = re.findall(
        r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)[^A-Za-z]{0,30}recouvre\s+sa\s+pleine\s+capacit√©",
        full_text,
        flags=re.IGNORECASE
    )
    for m in matches:
        nom_list.append(m.strip())
    match_ne_a_context = re.finditer(
        r"(.{1,50})\b(n√©|n√©e|n√©\(e\))\s+√†",
        full_text,
        re.IGNORECASE
    )

    for m in match_ne_a_context:
        contexte = m.group(1).strip()
        print(f"voila le pution de salopard: {m.group(1)}")
        # Tente d'extraire un NOM ou "Pr√©nom NOM" √† la fin du contexte
        nom_candidat = re.search(
            r"(?:Monsieur|Madame)?\s*([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)[,;\s]+([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)?$",
            contexte,
            re.IGNORECASE
        )
        if nom_candidat:
            if nom_candidat.group(2):  # Pr√©nom et nom
                nom_list.append(f"{nom_candidat.group(1).strip()}, {nom_candidat.group(2).strip()}")
            else:  # Un seul mot ‚Üí probablement nom de famille seul
                nom_list.append(nom_candidat.group(1).strip())

    match_observation_protectrice = re.findall(
        r"mesures?\s+d[‚Äô']?observation\s+protectrice.{0,30}?(?:√†\s+l'√©gard\s+de\s+)(?:(?:Monsieur|Madame|Mr|Mme)\s+)?"
        r"([A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+)",
        full_text,
        flags=re.IGNORECASE
    )
    for nom in match_observation_protectrice:
        nom_list.append(nom.strip())

    for m in RX_DECL_NP_RRN.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match_sv_flexible", m=m)

    for m in RX_DECL_CIVILITE_NP_RRN.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}", regex_name="match_sv_flexible", m=m)

    for m in RX_NOM_ET_PRENOM_LABEL.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip().replace(',', ' ')}")
    for m in RX_PRENOM_NOM_NE_A.finditer(full_text):
        nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}")
    # Expression r√©guli√®re pour capturer le nom complet avant "n√© √†"
    match_noms_complets = re.findall(
        r"((?:[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+\s+){1,6}[A-Z√â√à√ä√Ä√Ça-z√©√®√™√†√¢√ß√´√Ø√º√∂'\-]+),?\s+(n√©|n√©e|n√©\(e\))\s+√†",
        full_text,
        re.IGNORECASE
    )
    for nom_complet, _ in match_noms_complets:
        nom_list.append(nom_complet.strip())

    # --- En cause de : bloc + items (liste 1., 2., ‚Ä¶) ---
    for mb in RX_EN_CAUSE_BLOCK.finditer(full_text):
        bloc = mb.group("bloc")
        for m in RX_EN_CAUSE_ITEM_NP.finditer(bloc):
            nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
                            regex_name="RX_EN_CAUSE_ITEM_NP", m=m)
        for m in RX_EN_CAUSE_ITEM_PN.finditer(bloc):
            nom_list.append(f"{m.group('nom').strip()}, {m.group('prenoms').strip()}",
                            regex_name="RX_EN_CAUSE_ITEM_NP", m=m)


# ______________________________________________________________________________________________________________________
#                          NETTOYAGE DES NOMS + EMPECHER DES NOMS EN DOUBLE
# ______________________________________________________________________________________________________________________
    noms_nettoyes = nettoyer_noms_avances(nom_list)
    print("DEBUG sortie nettoyer_noms_avances =", noms_nettoyes)

    # 1) Calcule la liste locale des nouveaux noms (pas besoin d‚Äô√™tre global)
    nouveaux_noms = []
    for nom in noms_nettoyes:
        key = (doc_id, nom.strip().lower())
        if key not in seen_nomspersonnes:
            nouveaux_noms.append(nom)

    # 2) Si rien de nouveau, on sort vite
    if not nouveaux_noms:
        return group_names_for_meili(noms_nettoyes)

    # 4) Mise √† jour de l‚Äô√©tat externe (persistant en m√©moire)
    seen_nomspersonnes.update(
        (doc_id, n.strip().lower()) for n in nouveaux_noms
    )
    if isinstance(nom_list, LoggedList):
        nom_list.flush()
    return group_names_for_meili(noms_nettoyes)